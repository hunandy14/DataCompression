/**********************************************************
Name : OpenRaw 2.5.2
Date : 2016/08/04
By   : CharlotteHonG
Final: 2016/10/13
**********************************************************/
#ifndef OPEN_RAW
#define OPEN_RAW


#include <iostream>
#include <fstream>
#include <vector>
#include <string>
#include <iomanip>
#include <sstream>
#include <cmath>
using namespace std;
typedef unsigned char imch;
typedef size_t imint;

namespace imr{
/*
     ######                      #####     ##
       ##                       ##   ##
       ##     ### ##   ## ###   ##       ####     ######    #####
       ##     ## # ##  ###       #####     ##        ##    ##   ##
       ##     ## # ##  ##            ##    ##       ##     #######
       ##     ## # ##  ##       ##   ##    ##      ##      ##
     ######   ##   ##  ##        #####   ######   ######    #####
*/
class ImrSize{
public:
    ImrSize(imint y, imint x);
    imint width;
    imint high;
    void info();
};
/*
     ######                       ####
       ##                        ##  ##
       ##     ### ##   ## ###   ##        #####    #####   ## ###
       ##     ## # ##  ###      ##       ##   ##  ##   ##  ###
       ##     ## # ##  ##       ##       ##   ##  ##   ##  ##
       ##     ## # ##  ##        ##  ##  ##   ##  ##   ##  ##
     ######   ##   ##  ##         ####    #####    #####   ##
*/
class ImrCoor{
public:
    ImrCoor(int y, int x);
    void info();
    // 重載運算子
    ImrCoor operator+(const ImrCoor &p);
    ImrCoor operator-(const ImrCoor &p);
    ImrCoor operator*(const ImrCoor &p);
    ImrCoor operator/(const ImrCoor &p);
    int y;
    int x;
};
/*
     ######                     ##   ##                    ##
       ##                       ##   ##                    ##
       ##     ### ##   ## ###   ### ###   ######   #####   ##  ##
       ##     ## # ##  ###      ## # ##  ##   ##  ##       ## ##
       ##     ## # ##  ##       ## # ##  ##   ##   ####    ####
       ##     ## # ##  ##       ##   ##  ##  ###      ##   ## ##
     ######   ##   ##  ##       ##   ##   ### ##  #####    ##  ##
*/
class ImrMask{
public:
    ImrMask(ImrSize masksize);
    ImrMask(ImrSize masksize, imch value);
    void sort(size_t len, size_t start);
    void info();
    imch avg();
    // 重載運算子
    imch & operator[](const size_t __n);
    const imch & operator[](const size_t __n) const;
    imch & at2d(size_t y, size_t x);
    const imch & at2d(size_t y, size_t x) const;
    ImrMask operator+(const ImrMask &p);
    ImrMask operator-(const ImrMask &p);
private:
    vector<imch> mask;
    ImrSize masksize;
};
/*
       ##

     ####     ### ##    ######  ## ###    ######  ##   ##
       ##     ## # ##  ##   ##  ###      ##   ##  ## # ##
       ##     ## # ##  ##   ##  ##       ##   ##  ## # ##
       ##     ## # ##   ######  ##       ##  ###  ## # ##
     ######   ##   ##       ##  ##        ### ##   ## ##
                        #####
*/
class imgraw {
public:
    imgraw(ImrSize size);
    ~imgraw();
    // imgraw
    void read(string filename);
    void write(string filename);
    imch point_read(imint y, imint x);
    void point_write(imint y, imint x, imch value);
    imch & at2d(size_t y, size_t x);
    const imch & at2d(size_t y, size_t x) const;
    void resize_canvas(ImrSize size);
    imint w();
    imint h();
    void info();
    void binarizae(imch value, imch high, imch low);
    void value(imch value);
    // Mask
    void setMaskSize(ImrSize masksize);
    imch & maskVal(ImrCoor ori, ImrCoor mas, ImrCoor shi);
    const imch & maskVal(ImrCoor ori, ImrCoor mas, ImrCoor shi) const;
    ImrMask getMask(ImrCoor ori, ImrCoor shi);
    // histogram
    void pri_htg(string title);
    // 重載運算子
    imch & operator[](const size_t __n);
    const imch & operator[](const size_t __n) const;
    imgraw operator+(const imgraw &p);
    imgraw operator+(const imch value);
    imgraw operator-(const imgraw &p);
    imgraw operator-(const imch value);
    // 新增的
    // 取得區塊
    void get_block();
    // 取得索引
    void get_idx(string sou_name, string ori_name);
    // 取得初始編碼簿
    void get_org(string sou_name);
    // 合併檔案
    void merge(string ori_name, string idx_name);
    // 取亂數
    int rand_int(int low, int up);
private:
    ifstream::pos_type filesize;
    string filename;
    vector<imch> img_data;
    imint width;
    imint high;
    imch max;
    imch min;
    int htg_data[256];
    void histogram();
    void extremum();
    ImrSize masksize;
    // 新增的
    class ImrBlock;
    vector<ImrBlock> blk_p;
public:
    ImrBlock block(imint pos);
};
/*
     ######                     ######    ###                       ##
       ##                       ##   ##    ##                       ##
       ##     ### ##   ## ###   ##   ##    ##      #####    #####   ##  ##
       ##     ## # ##  ###      ######     ##     ##   ##  ##       ## ##
       ##     ## # ##  ##       ##   ##    ##     ##   ##  ##       ####
       ##     ## # ##  ##       ##   ##    ##     ##   ##  ##       ## ##
     ######   ##   ##  ##       ######    ####     #####    #####   ##  ##

*/
class imgraw::ImrBlock{
public:
    ImrBlock();
    ImrBlock(imgraw& img, imint pos);
    void info();
    imch& operator[](const size_t __n);
    const imch& operator[](const size_t __n) const;
    void operator=(ImrBlock b);
    ImrBlock& copy(const ImrBlock& b);
    imint dif_squ(imgraw& img);
private:
    vector<imch*> img_p;
};
};//imr


#endif